// Generated by HLC 5.0.0 (HL v4)
#ifndef INC_hxd__res__Image
#define INC_hxd__res__Image
typedef struct _hxd__res__$Image *hxd__res__$Image;
typedef struct _hxd__res__Image *hxd__res__Image;
#include <haxe/io/Bytes.h>
#include <hxd/res/Image.h>
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <h3d/mat/Filter.h>
#include <hxd/PixelFormat.h>
#include <hxd/Pixels.h>
#include <h3d/mat/Texture.h>
#include <hxd/res/Resource.h>
#include <hxd/fs/FileEntry.h>
#include <hxd/res/ImageInfo.h>


typedef struct {
	HL__ENUM_CONSTRUCT__
	haxe__io__Bytes p0;
	hxd__res__Image p1;
} Enumt$ctx_0b17755;
struct _hxd__res__$Image {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	venum* DEFAULT_FILTER;
	int MIPMAP_MAX_SIZE;
	bool ENABLE_AUTO_WATCH;
	vclosure* customCheckInfo;
	vclosure* decodeJPG;
	vclosure* decodePNG;
	hxd__Pixels BLACK_1x1;
	vvirtual* ASYNC_LOADER;
	bool LOG_TEXTURE_LOAD;
	vclosure* setupTextureFlags;
};
struct _hxd__res__Image {
	hl_type *$type;
	hxd__fs__FileEntry entry;
	h3d__mat__Texture tex;
	hxd__res__ImageInfo inf;
	bool enableAsyncLoading;
};
#endif

